.. Two Scoops of Django ja documentation master file, created by
   sphinx-quickstart on Tue May 19 16:54:08 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to Two Scoops of Django ja's documentation!
===================================================

Contents:

* Dedication v
* About the Dedication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vi
* Authors’ Notes xxvii
* A Few Words From Daniel Roy Greenfeld . . . . . . . . . . . . . . . . . . . . . . . . . xxvii
* A Few Words From Audrey Roy Greenfeld . . . . . . . . . . . . . . . . . . . . . . . . xxviii
* Introduction xxix
* A Word About Our Recommendations . . . . . . . . . . . . . . . . . . . . . . . . . . xxix
* Why Two Scoops of Django? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxx
* Before You Begin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxi
* This book is intended for Django 1.8 and Python 2.7.x/3.3.3+ . . . . . . . . . . . . xxxi
* Each Chapter Stands On Its Own . . . . . . . . . . . . . . . . . . . . . . . . . . xxxi
* Conventions Used in This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxii
* Core Concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxiii
* Keep It Simple, Stupid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxiii
* Fat Models, Helper Modules, Thin Views, Stupid Templates . . . . . . . . . . . . xxxiv
* Start With Django By Default . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxiv
* Be Familiar with Django’s Design Philosophies . . . . . . . . . . . . . . . . . . . xxxiv
* The Twelve Factor App . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxv
* Our Writing Concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxv
* Provide the Best Material . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxv
* Stand on the Shoulders of Giants . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxv
* Listen to Our Readers and Reviewers . . . . . . . . . . . . . . . . . . . . . . . . xxxvi
* Publish Errata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxvi
* 1 コーディングスタイル 1
* 1.1 コードの可読性を保つ重要さ . . . . . . . . . . . . . . . . . . 1
* 1.2 PEP 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
* 1.2.1 79文字制限 . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
* 1.3 インポート文の書き方 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
* 1.4 明示的な相対インポートを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
* 1.5 * インポートを使わない . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
* 1.6 Django固有のコーディングスタイル . . . . . . . . . . . . . . . . . . . 9
* 1.7 JS、HTML、CSS のスタイルガイドを選ぶ . . . . . . . . . . . . . . . . . . . . . 9
* 1.7.1 JavaScript スタイルガイド . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
* 1.7.2 HTML と CSS のスタイルガイド . . . . . . . . . . . . . . . . . . . . . . . 10
* 1.8 IDE (やテキストエディタ)に依存したコードを書かない . . . . . . . . . . . . . . . . . . . . . . 10
* 1.9 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
* 2 最適なDjango環境セットアップ 13
* 2.1 どの場所でも同じデータベースエンジンを使う . . . . . . . . . . . . . . . . . . . . 13
* 2.1.1 フィクスチャーは魔法の解法ではない . . . . . . . . . . . . . . . . . . . . . 13
* 2.1.2 本番環境のデータをローカルに完璧にはコピーできない . . . . . . 14
* 2.1.3 違ったデータベースでは違ったフィールドのタイプ/制約が存在する . . . . . . . 14
* 2.2 Pip と Virtualenv を使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
* 2.3 Pip で Django と他の依存パッケージをインストールする . . . . . . . . . . . . . . . . . . 17
* 2.4 バージョンコントロールシステムを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
* 2.5 オプショナル: 開発環境を同じにする . . . . . . . . . . . . . . . . . . . . . . . . . . 18
* 2.5.1 Vagrant と VirtualBox . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
* 2.6 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
* 3 Django プロジェクトのレイアウト方法 21
* 3.1 Django 1.8 デフォルトのプロジェクトレイアウト . . . . . . . . . . . . . . . . . . . . . . . . . 21
* 3.2 好ましいプロジェクトレイアウト . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
* 3.2.1 トップレベル: リポジトリルート . . . . . . . . . . . . . . . . . . . . . . . . . 23
* 3.2.2 サードレベル: 設定用ルート . . . . . . . . . . . . . . . . . . . . . . 23
* 3.3 プロジェクトレイアウトのサンプル . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
* 3.4 Virtualenvはどうするべき? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
* 3.5 レイアウト生成に Cookiecutter テンプレートを使う . . . . . . . . . . . . . . 28
* 3.6 他のやり方 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
* 3.7 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
* 4 Django アプリデザインの基礎 31
* 4.1 Django アプリデザインのゴールデンルール . . . . . . . . . . . . . . . . . . . . . . 32
* 4.1.1 プロジェクト内アプリの実用的な例 . . . . . . . . . . . . . . . . . . 33
* 4.2 Django アプリはどんな名前にするべきか . . . . . . . . . . . . . . . . . . . . . . . . . 34
* 4.3 迷ったらアプリは小さくしよう . . . . . . . . . . . . . . . . . . . . . . . . . 35
* 4.4 アプリにはあるモジュールはどんなもの? . . . . . . . . . . . . . . . . . . . . . . . . . 35
* 4.4.1 よくあるアプリのモジュール . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
* 4.4.2 まれにあるアプリのモジュール . . . . . . . . . . . . . . . . . . . . . . . . . 36
* 4.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
* 5 Settings と Requirements ファイル 39
* 5.1 バージョン管理しないローカル Settings を避ける. . . . . . . . . . . . . . . . . . . . . . . . 40
* 5.2 複数の Settings ファイルを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
* 5.2.1 開発用 Settings の例 . . . . . . . . . . . . . . . . . . . . . 44
* 5.2.2 複数の開発用 Settings . . . . . . . . . . . . . . . . . . . . . . . 45
* 5.3 設定をコードから分離する . . . . . . . . . . . . . . . . . . . . . . . . . 46
* 5.3.1 環境変数をシークレットな値に使う前の注意 . . . . . . . . 47
* 5.3.2 環境変数を開発環境で設定する方法 . . . . . . . . . . . . . . . . 47
* 5.3.3 環境変数を本番環境で設定する方法 . . . . . . . . . . . . . 49
* 5.3.4 キークレットキーが存在しない例外を扱う . . . . . . . . . . . . . . . . . 50
* 5.4 環境変数が使えない場合 . . . . . . . . . . . . . . . . . . . . 52
* 5.4.1 JSON ファイルを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
* 5.4.2 Config, YAML, や XML ファイルフォーマットを使う . . . . . . . . . . . . . . 53
* 5.5 複数の Requirements ファイルを使う . . . . . . . . . . . . . . . . . . . . . . . . . 53
* 5.5.1 複数の Requirements ファイルからインストールする . . . . . . . . . . . . . . . . 55
* 5.5.2 Platforms as a Service (PaaS) で複数の Requirements ファイルを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
* 5.6 Settings でファイルパスを扱う . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
* 5.7 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
* 6 Model ベストプラクティス 61
* 6.1 基本 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
* 6.1.1 大量の Models を分割する. . . . . . . . . . . . . . . . . . 62
* 6.1.2 Model の継承に気をつけよう . . . . . . . . . . . . . . . . . . . . 62
* 6.1.3 Model 継承の実用例: TimeStampedModel . . . . . . . . . 64
* 6.1.4 Database Migrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
* 6.2 Django Model デザイン . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
* 6.2.1 正規化をはじめよう . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
* 6.2.2 非正規化の前にキャッシュしよう . . . . . . . . . . . . . . . . . . . . . . . . 67
* 6.2.3 非正規化は絶対に必要なときだけ . . . . . . . . . . . . . . . . . . 67
* 6.2.4 Null と Blank を使うとき . . . . . . . . . . . . . . . . . . . . . . . . 68
* 6.2.5 BinaryField を使うとき . . . . . . . . . . . . . . . . . . . . . . . . . . 70
* 6.2.6 Generic Relations を使うのは避けよう . . . . . . . . . . . . . . . . . . . 71
* 6.2.7 PostgreSQL 特有フィールド: Null と Blank を使うとき . . . . . . . . 72
* 6.3 Model _meta API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
* 6.4 Model Manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
* 6.5 ファットな Model とは何か . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
* 6.5.1 Model Behavior - Mixins . . . . . . . . . . . . . . . . . . . . . . . 76
* 6.5.2 ステートレスなヘルパー関数 . . . . . . . . . . . . . . . . . . . . . . . . . 77
* 6.5.3 Model Behavior vs ヘルパー関数 . . . . . . . . . . . . . . . . . . . 77
* 6.6 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
* 7 Queries and the Database Layer 79
* 7.1 Use get object or 404() for Single Objects . . . . . . . . . . . . . . . . . . . . . 79
* 7.2 Be Careful With Queries That Might Throw Exceptions . . . . . . . . . . . . . . 80
* 7.2.1 ObjectDoesNotExist vs. DoesNotExist . . . . . . . . . . . . . . . . . . 80
* 7.2.2 When You Just Want One Object but Get Three Back . . . . . . . . . . 81
* 7.3 Use Lazy Evaluation to Make Queries Legible . . . . . . . . . . . . . . . . . . . 81
* 7.4 Lean on Advanced Query Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
* 7.4.1 Query Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
* 7.4.2 Database Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
* 7.5 Don’t Drop Down to Raw SQL Until It’s Necessary . . . . . . . . . . . . . . . . 85
* 7.6 Add Indexes as Needed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
* 7.7 Transactions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
* 7.7.1 Wrapping Each HTTP Request in a Transaction . . . . . . . . . . . . . 87
* 7.7.2 Explicit Transaction Declaration . . . . . . . . . . . . . . . . . . . . . . 90
* 7.7.3 django.http.StreamingHttpResponse and Transactions . . . . . . . . . . 91
* 7.7.4 Transactions in MySQL . . . . . . . . . . . . . . . . . . . . . . . . . . 92
* 7.7.5 Django ORMトランザクションについての参考情報 . . . . . . . . . . . . . . . . . . . . 92
* 7.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
* 8 Function- and Class-Based Views 93
* 8.1 When to Use FBVs or CBVs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
* 8.2 Keep View Logic Out of URLConfs . . . . . . . . . . . . . . . . . . . . . . . . 95
* 8.3 Stick to Loose Coupling in URLConfs . . . . . . . . . . . . . . . . . . . . . . . 96
* 8.3.1 What if We Aren’t Using CBVs? . . . . . . . . . . . . . . . . . . . . . . 99
* 8.4 Use URL Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
* 8.4.1 Makes for Shorter, More Obvious and Don’t Repeat Yourself URL Names 100
* 8.4.2 Increases Interoperability With Third-Party Libraries . . . . . . . . . . . 101
* 8.4.3 Easier Searches, Upgrades, and Refactors . . . . . . . . . . . . . . . . . 102
* 8.4.4 Allows for More App and Template Reverse Tricks . . . . . . . . . . . . 102
* 8.5 Don’t Reference Views as Strings in URLConfs . . . . . . . . . . . . . . . . . . 102
* 8.6 Try to Keep Business Logic Out of Views . . . . . . . . . . . . . . . . . . . . . 103
* 8.7 Django Views Are Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
* 8.7.1 The Simplest Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
* 8.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
* 9 Best Practices for Function-Based Views 107
* 9.1 Advantages of FBVs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
* 9.2 Passing the HttpRequest Object . . . . . . . . . . . . . . . . . . . . . . . . . . 108
* 9.3 Decorators Are Sweet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
* 9.3.1 Be Conservative With Decorators . . . . . . . . . . . . . . . . . . . . . 113
* 9.3.2 デコレータについての参考情報 . . . . . . . . . . . . . . . . . . . . 114
* 9.4 Passing the HttpResponse Object . . . . . . . . . . . . . . . . . . . . . . . . . . 114
* 9.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
* 10 Best Practices for Class-Based Views 115
* 10.1 Guidelines When Working With CBVs . . . . . . . . . . . . . . . . . . . . . . 116
* 10.2 Using Mixins With CBVs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
* 10.3 Which Django GCBV Should Be Used for What Task? . . . . . . . . . . . . . . 118
* 10.4 General Tips for Django CBVs . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
* 10.4.1 Constraining Django CBV/GCBV Access to Authenticated Users . . . . 120
* 10.4.2 Performing Custom Actions on Views With Valid Forms . . . . . . . . . 120
* 10.4.3 Performing Custom Actions on Views With Invalid Forms . . . . . . . . 121
* 10.4.4 Using the View Object . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
* 10.5 How GCBVs and Forms Fit Together . . . . . . . . . . . . . . . . . . . . . . . 124
* 10.5.1 Views + ModelForm Example . . . . . . . . . . . . . . . . . . . . . . . 125
* 10.5.2 Views + Form Example . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
* 10.6 Using Just django.views.generic.View . . . . . . . . . . . . . . . . . . . . . . . . 131
* 10.7 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
* 10.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
* 11 Form Fundamentals 135
* 11.1 Validate All Incoming Data With Django Forms . . . . . . . . . . . . . . . . . . 135
* 11.2 Use the POST Method in HTML Forms . . . . . . . . . . . . . . . . . . . . . 138
* 11.3 Always Use CSRF Protection With HTTP Forms That Modify Data . . . . . . . 138
* 11.3.1 Posting Data via AJAX . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
* 11.4 Understand How to Add Django Form Instance Attributes . . . . . . . . . . . . 139
* 11.5 Know How Form Validation Works . . . . . . . . . . . . . . . . . . . . . . . . . 141
* 11.5.1 ModelForm Data Is Saved to the Form, Then the Model Instance . . . . 142
* 11.6 Fields Without Pre-Made Widgets . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 11.7 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 11.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 12 Common Patterns for Forms 145
* 12.1 Pattern 1: Simple ModelForm With Default Validators . . . . . . . . . . . . . . 146
* 12.2 Pattern 2: Custom Form Field Validators in ModelForms . . . . . . . . . . . . . 147
* 12.3 Pattern 3: Overriding the Clean Stage of Validation . . . . . . . . . . . . . . . . 152
* 12.4 Pattern 4: Hacking Form Fields (2 CBVs, 2 Forms, 1 Model) . . . . . . . . . . . 155
* 12.5 Pattern 5: Reusable Search Mixin View . . . . . . . . . . . . . . . . . . . . . . . 159
* 12.6 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
* 13 Templates: Best Practices 163
* 13.1 Keep Templates Mostly in templates/ . . . . . . . . . . . . . . . . . . . . . . 163
* 13.2 Template Architecture Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
* 13.2.1 2-Tier Template Architecture Example . . . . . . . . . . . . . . . . . . . 164
* 13.2.2 3-Tier Template Architecture Example . . . . . . . . . . . . . . . . . . . 165
* 13.2.3 Flat Is Better Than Nested . . . . . . . . . . . . . . . . . . . . . . . . . 166
* 13.3 Limit Processing in Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
* 13.3.1 Gotcha 1: Aggregation in Templates . . . . . . . . . . . . . . . . . . . . 169
* 13.3.2 Gotcha 2: Filtering With Conditionals in Templates . . . . . . . . . . . 171
* 13.3.3 Gotcha 3: Complex Implied Queries in Templates . . . . . . . . . . . . . 173
* 13.3.4 Gotcha 4: Hidden CPU Load in Templates . . . . . . . . . . . . . . . . 174
* 13.3.5 Gotcha 5: Hidden REST API Calls in Templates . . . . . . . . . . . . . 175
* 13.4 Don’t Bother Making Your Generated HTML Pretty . . . . . . . . . . . . . . . 175
* 10.7 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
* 10.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
* 11 Form Fundamentals 135
* 11.1 Validate All Incoming Data With Django Forms . . . . . . . . . . . . . . . . . . 135
* 11.2 Use the POST Method in HTML Forms . . . . . . . . . . . . . . . . . . . . . 138
* 11.3 Always Use CSRF Protection With HTTP Forms That Modify Data . . . . . . . 138
* 11.3.1 Posting Data via AJAX . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
* 11.4 Understand How to Add Django Form Instance Attributes . . . . . . . . . . . . 139
* 11.5 Know How Form Validation Works . . . . . . . . . . . . . . . . . . . . . . . . . 141
* 11.5.1 ModelForm Data Is Saved to the Form, Then the Model Instance . . . . 142
* 11.6 Fields Without Pre-Made Widgets . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 11.7 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 11.8 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
* 12 Common Patterns for Forms 145
* 12.1 Pattern 1: Simple ModelForm With Default Validators . . . . . . . . . . . . . . 146
* 12.2 Pattern 2: Custom Form Field Validators in ModelForms . . . . . . . . . . . . . 147
* 12.3 Pattern 3: Overriding the Clean Stage of Validation . . . . . . . . . . . . . . . . 152
* 12.4 Pattern 4: Hacking Form Fields (2 CBVs, 2 Forms, 1 Model) . . . . . . . . . . . 155
* 12.5 Pattern 5: Reusable Search Mixin View . . . . . . . . . . . . . . . . . . . . . . . 159
* 12.6 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
* 13 テンプレート: ベストプラクティス 163
* 13.1 テンプレートはtemplatesディレクトリの中に . . . . . . . . . . . . . . . . . . . . . . 163
* 13.2 テンプレートアーキテクチャパターン . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
* 13.2.1 2層テンプレートアーキテクチャ . . . . . . . . . . . . . . . . . . . 164
* 13.2.2 3層テンプレートアーキテクチャ . . . . . . . . . . . . . . . . . . . 165
* 13.2.3 フラットはネストよりいい . . . . . . . . . . . . . . . . . . . . . . . . . 166
* 13.3 テンプレートでの処理を制限する . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
* 13.3.1 落とし穴1: テンプレートのなかの集約処理 . . . . . . . . . . . . . . . . . . . . 169
* 13.3.2 落とし穴2: テンプレートのなかの条件付きフィルタリング . . . . . . . . . . . 171
* 13.3.3 落とし穴3: テンプレートのなかの複雑なクエリを実行する . . . . . . . . . . . . . 173
* 13.3.4 落とし穴4: テンプレートのなかの隠れた計算処理 . . . . . . . . . . . . . . . . 174
* 13.3.5 落とし穴5: テンプレートのなかの隠れた外部APIコール . . . . . . . . . . . . . 175
* 13.4 HTMLが綺麗に出力されるかで悩まないいいい . . . . . . . . . . . . . . . 175
* 13.5 Exploring Template Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
* 13.6 block.super Gives the Power of Control . . . . . . . . . . . . . . . . . . . . . . . 180
* 13.7 Useful Things to Consider . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
* 13.7.1 Avoid Coupling Styles Too Tightly to Python Code . . . . . . . . . . . . 182
* 13.7.2 Common Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
* 13.7.3 Location, Location, Location! . . . . . . . . . . . . . . . . . . . . . . . 183
* 13.7.4 Use Named Context Objects . . . . . . . . . . . . . . . . . . . . . . . . 183
* 13.7.5 Use URL Names Instead of Hardcoded Paths . . . . . . . . . . . . . . . 184
* 13.7.6 Debugging Complex Templates . . . . . . . . . . . . . . . . . . . . . . 184
* 13.8 Error Page Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
* 13.9 Follow a Minimalist Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
* 13.10 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
* 14 Template Tags and Filters 187
* 14.1 Filters Are Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
* 14.1.1 Filters Are Easy to Test . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
* 14.1.2 Filters and Code Reuse . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
* 14.1.3 When to Write Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
* 14.2 Custom Template Tags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
* 14.2.1 Template Tags Are Harder to Debug . . . . . . . . . . . . . . . . . . . . 189
* 14.2.2 Template Tags Make Code Reuse Harder . . . . . . . . . . . . . . . . . 189
* 14.2.3 The Performance Cost of Template Tags . . . . . . . . . . . . . . . . . . 189
* 14.2.4 When to Write Template Tags . . . . . . . . . . . . . . . . . . . . . . . 190
* 14.3 Naming Your Template Tag Libraries . . . . . . . . . . . . . . . . . . . . . . . . 190
* 14.4 Loading Your Template Tag Modules . . . . . . . . . . . . . . . . . . . . . . . . 191
* 14.4.1 Watch Out for This Crazy Anti-Pattern . . . . . . . . . . . . . . . . . . 191
* 14.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
* 15 Django Templates and Jinja2 193
* 15.1 What’s the Syntactical Difference? . . . . . . . . . . . . . . . . . . . . . . . . . 193
* 15.2 Should I Switch? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
* 15.2.1 Advantages of DTL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
* 15.2.2 Advantages of Jinja2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
* 15.2.3 Which One Wins? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
* 15.3 Considerations When Using Jinja2 With Django . . . . . . . . . . . . . . . . . 195
* 15.3.1 CSRF and Jinja2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
* 15.3.2 Using Template Tags in Jinja2 Templates . . . . . . . . . . . . . . . . . 196
* 15.3.3 Using Django-Style Template Filters in Jinja2 Templates . . . . . . . . . 196
* 15.3.4 Context Processors Aren’t Called by Jinja2 Templates . . . . . . . . . . . 198
* 15.3.5 The Jinja2 Environment Object Should Be Considered Static . . . . . . . 200
* 15.4 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
* 15.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
* 16 REST APIを作る 203
* 16.1 REST API設計の基本 . . . . . . . . . . . . . . . . . . . . . 204
* 16.2 簡単なJSON APIを実装してみる . . . . . . . . . . . . . . . . . . . . . . . . . 206
* 16.3 REST APIアーキテクチャ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
* 16.3.1 アプリのためのコードはアプリのなかに配置する . . . . . . . . . . . . . . . . 209
* 16.3.2 プロジェクトのためのコードは整頓する . . . . . . . . . . . . . . . 209
* 16.3.3 ビジネスロジックはAPIビューの外に置く . . . . . . . . . . . . . . 209
* 16.3.4 API URLをまとめる . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
* 16.3.5 APIをテストする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
* 16.3.6 APIにバージョンをつける . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
* 16.4 サービス指向アーキテクチャ(SOA) . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
* 16.5 APIの提供をやめるには . . . . . . . . . . . . . . . . . . . . . . . . . . 213
* 16.5.1 ステップ1: ユーザに残り期間を通知する . . . . . . . . . . . . . . . 213
* 16.5.2 ステップ2: APIを410 Error Viewに置き換える . . . . . . . . . . . . . . . . 214
* 16.6 RESTフレームワークを評価する . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
* 16.6.1 Django Rest Framework デファクトスタンダード . . . . . . . . . . . . . . 215
* 16.6.2 使いやすいか . . . . . . . . . . . . . . 215
* 16.6.3 RPCは書きやすいか . . . . . . . . . . . . . 215
* 16.6.4 CBVかFBV . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
* 16.7 回数制限 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
* 16.7.1 無制限APIアクセスに気をつけよう . . . . . . . . . . . . . . . . . . . . 216
* 16.7.2 試しているRESTフレームワークは回数制限機能をもっているか . . . . . . . . . . . . . 217
* 16.7.3 回数制限はビジネスになる . . . . . . . . . . . . . . . . . . . . 217
* 16.8 作ったREST APIを広めよう . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
* 16.8.1 ドキュメンテーション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
* 16.8.2 クライアントSDKの提供 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
* 16.9 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
* 16.10 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
* 17 REST APIを使う 221
* 17.1 クライアントのデバッグ方法を学ぶ . . . . . . . . . . . . . . . . . . . . . . . . . . 222
* 17.2 JavaScriptで組まれた静的アセットプリプロセッサを検討する . . . . . . . . . . 223
* 17.3 SEOを考える . . . . . . . . . . . . . . . . . . . 223
* 17.3.1 サーチエンジンのドキュメントを調べる . . . . . . . . . . . . . . . . . . 223
* 17.3.2 手作りsitemap.xml . . . . . . . . . . . . . . . . . . . . . . . . 224
* 17.3.3 外部サービスを使ってクロール可能にする . . . . . . . . . . . . . . . . 225
* 17.4 リアルタイム悲哀 レイテンシ . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
* 17.4.1 解決策: アニメーションで遅延を隠す . . . . . . . . . . . . . . . 225
* 17.4.2 解決策: 成功したようにみせる . . . . . . . . . . . . . . . . . . . 226
* 17.4.3 解決策: 地理的にサーバを配置する . . . . . . . . . . . . . . . . . . 226
* 17.4.4 解決策: 地理的にユーザを配置する . . . . . . . . . . . . . . . . . . 226
* 17.5 アンチパターンを防ぐ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
* 17.5.1 すべてをシングルページアプリにする . . . . . . . . 227
* 17.5.2 テストを書かない . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
* 17.5.3 Javascriptのメモリ管理を理解していない . . . . . . . . . . . 227
* 17.5.4 DOMにデータを格納する . . . . . . . . . . . . . 227
* 17.6 AJAXにおけるCSRFトークン . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
* 17.6.1 JQueryとCSRFトークン . . . . . . . . . . . . . . . . . . . . . . . . 228
* 17.6.2 Backbone.jsとCSRFトークン . . . . . . . . . . . . . . . . . . . . . 230
* 17.6.3 AngularJSとCSRFトークン . . . . . . . . . . . . . . . . . . . . . . 230
* 17.7 JavaScriptスキルを改善する . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
* 17.7.1 スキルレベルを知る . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
* 17.7.2 JavaScriptを知りたい! . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
* 17.8 JavaScriptコーディング規約に沿う . . . . . . . . . . . . . . . . . . . . . . . . 231
* 17.9 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
* 17.10 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
* 18 コアコンポーネントを置き換えるトレードオフ 233
* 18.1 改造Django . . . . . . . . . . . . . . . . . . . . . . 234
* 18.2 NoSQLデータベース vs. リレーショナルデータベース . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
* 18.2.1 全てのNoSQLデータベースがACIDを満しているわけではない . . . . . . . . . 235
* 18.2.2 相応わしいデータベースを使う . . . . . . . . . 236
* 18.2.3 百聞は一見にしかず . . . . . . . . . . . . . . . 236
* 18.2.4 NoSQLデータベースの使いどころ . . . . . . . . . . 237
* 18.3 テンプレートシステムを置き換えたい? . . . . . . . . . . . . . 237
* 18.4 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
* 19 Django Adminを使う 239
* 19.1 エンドユーザ向けではない . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240
* 19.2 Adminをカスタマイズする vs. 新しいビューをつくる . . . . . . . . . . . . . . . . . . . . . . . 240
* 19.3 Adminでのオブジェクトの表示を変える . . . . . . . . . . . . . . . . . . . . . 240
* 19.4 ModelAdminにメソッドを追加する . . . . . . . . . . . . . . . . . . . . . 244
* 19.5 みんなが使うときはlist_editableを使ってはいけない . . . . . . . . . . . . . . . . . 245
* 19.6 Django Adminドキュメントジェネレータ . . . . . . . . . . . . . . . . . . . . 246
* 19.7 Django AdminとDjango Admin Docをセキュアにする . . . . . . . . . . . . . . . 247
* 19.8 Django Adminで見た目をカスタマイズ . . . . . . . . . . . . . . . . . . . 247
* 19.8.1 評価ポイント: ドキュメントがあるか . . . . . . . . . . . . . . 248
* 19.8.2 お手製のAdmin拡張にはテストを書きましょう . . . . . . . . . . . . 248
* 19.9 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
* 20 ユーザを扱う 251
* 20.1 ユーザモデルを見つける . . . . . . . . . . . . . . . . . . 251
* 20.1.1 ForeignKeyにはsettings.AUTH_USER_MODELを使う . . . . . 252
* 20.1.2 ForeignKeyにはget_user_model()を使ってはならない . . . . . . . . . . . 252
* 20.2 ユーザモデルの1.5以前から1.5以降へのマイグレーション . . . . . . . . . . 253
* 20.3 ユーザモデルをカスタマイズする . . . . . . . . . . . . . . . . . . . 253
* 20.3.1 オプション1: AbstractUserを継承する . . . . . . . . . . . . . . . . . . . . . . 254
* 20.3.2 オプション2: AbstractBaseUserを継承する . . . . . . . . . . . . . . . . . . . . 255
* 20.3.3 オプション3: 別のモデルと接続する . . . . . . . . . . . . . . 255
* 20.4 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
* 21 Djangoの秘密: 外部パッケージ 259
* 21.1 外部パッケージの例 . . . . . . . . . . . . . . . . . . . . . . . . . 260
* 21.2 PyPIを知る . . . . . . . . . . . . . . . . . . . . . . 260
* 21.3 DjangoPackages.comを知る . . . . . . . . . . . . . . . . . . . . . . . . . 261
* 21.4 あなたのできることを知る . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
* 21.5 パッケージ管理ツール . . . . . . . . . . . . . . . . . . . . 261
* 21.6 パッケージ要求リスト . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
* 21.7 Djangoパッケージを使う . . . . . . . . . . . . . . . . . . . . . . 262
* 21.7.1 ステップ1: パッケージを理解する . . . . . . . . . . . . . 262
* 21.7.2 ステップ2: パッケージ要求リストに追加する . . . . . 262
* 21.7.3 ステップ3: Virtualenvにインストールする . . . . . . . . . . . 263
* 21.7.4 ステップ4: インストール手順をまもる . . . . . . . 264
* 21.8 トラブルシューティング . . . . . . . . . . . . . . . . . . . . . . . 264
* 21.9 作ったDjangoパッケージを公開する . . . . . . . . . . . . . . . . . . . . . . . 264
* 21.10 良いDjangoパッケージを作るには . . . . . . . . . . . . . . . . . . . . . . . 265
* 21.10.1 目的 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
* 21.10.2 対象範囲 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
* 21.10.3 ドキュメンテーション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
* 21.10.4 テスト . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
* 21.10.5 テンプレート . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
* 21.10.6 活発か . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
* 21.10.7 コミュニティ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
* 21.10.8 モジュラリティ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
* 21.10.9 PyPIから取得できるか . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
* 21.10.10 可能なかぎり広範囲のバージョンをサポートする . . . . . . . . . . . . 268
* 21.10.11 適切なバージョン番号 . . . . . . . . . . . . . . . . . . . . . . . . . . 269
* 21.10.12 名前 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
* 21.10.13 ライセンス . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
* 21.10.14 わかりやすいコード . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
* 21.10.15 URL名前空間 . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
* 21.11 パッケージを簡単に作るには . . . . . . . . . . . . . . . . . . . . 272
* 21.12 パッケージをメンテナンスする . . . . . . . . . . . . . . . . . . . . . . 272
* 21.12.1 貢献者リスト . . . . . . . . . . . . . . . . . . . . . . . . 273
* 21.12.2 プルリクエストを拒否する . . . . . . . . . . . . . . . . . . . . . . . . 273
* 21.12.3 PyPIにリリースする . . . . . . . . . . . . . . . . . . . . . . . . . . 274
* 21.12.4 Wheel . . . . . . . . . . . . . . . . . . . . 275
* 21.12.5 最新のDjangoバージョンをサポートする . . . . . . . . . . . . . 276
* 21.12.6 良いセキュリティプラクティス . . . . . . . . . . . . . . . . . . . . . . . 276
* 21.12.7 サンブルのベーステンプレートを提供する . . . . . . . . . . . . . . . . . . . . . . 277
* 21.12.8 パッケージを手離す . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
* 21.13 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
* 21.14 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278
* 22 テスト うさんくさくてお金の無駄! 279
* 22.1 テストはお金と仕事と生活を守る . . . . . . . . . . . . . . . . . . . . . . . . 279
* 22.2 テストの構成 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
* 22.3 ユニットテストの書き方 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
* 22.3.1 一つのテストはやることは一つ . . . . . . . . . . . . . . . . . . . . 281
* 22.3.2 RequestFactoryの使い方 . . . . . . . . . . . . 284
* 22.3.3 テストされたものをテストしない . . . . . . . . . . . . . . . . . 285
* 22.3.4 DRY原則はテストにはあてはまらない . . . . . . . . . . . 285
* 22.3.5 フィクスチャをあてにならない . . . . . . . . . . . . . . . . . . . . . . . . . . . 286
* 22.3.6 それぞれのテストすべき事柄 . . . . . . . . . . . . . . . . . . . . . . . 286
* 22.3.7 失敗をテストする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
* 22.3.8 モックでテストを閉じこめる . . . . . . . . . 288
* 22.3.9 バリエーション豊かなアサーションメソッド . . . . . . . . . . . . . . . . . . . . . . . 290
* 22.3.10 テストの目的を書く . . . . . . . . . . . . . . . . . . . . 291
* 22.4 結合テストとは . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
* 22.5 継続的結合 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292
* 22.6 テストを書く時間なんてないんだ! . . . . . . . . . . . . . . . . . . . . 292
* 22.7 テスト網羅の楽しみ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
* 22.8 テスト網羅を楽しむための準備 . . . . . . . . . . . . . . . . . . . . . . . . 293
* 22.8.1 ステップ1: テストを書く . . . . . . . . . . . . . . . . . . . . . . . . . 293
* 22.8.2 ステップ2: テストを走らせる . . . . . . . . . . . . . 294
* 22.8.3 ステップ3: 結果発表! . . . . . . . . . . . . . . . . . . . . . . . . 294
* 22.9 テスト網羅を楽しむために . . . . . . . . . . . . . . . . . . . . . . . . . 295
* 22.10 unittest以外のやりかた . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
* 22.11 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
* 23 ドキュメンテーション: いつも心に 297
* 23.1 reStructuredTextを使う . . . . . . . . . . . . . . . . . . . . . . . 297
* 23.2 Sphinxを使ってドキュメントを生成する . . . . . . . . . . 299
* 23.3 Djangoプロジェクトが持っているべきドキュメントとは . . . . . . . . . . . . . . . . . . . 299
* 23.4 ドキュメンテーションについての参考情報 . . . . . . . . . . . . . . . . . . . . . . . . 301
* 23.5 もうひとつの方法Markdown . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
* 23.5.1 README.mdからREADME.rstへ: PyPIにアップロードするためにPandocを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
* 23.5.2 Markdownについての参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
* 23.6 Wikiなど他の方法 . . . . . . . . . . . . . . . . . . . . . 303
* 23.7 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
* 24 ボトルネックを改善しよう 305
* 24.1 そもそもやる必要あるの? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
* 24.2 クエリをよく使うページのスピードアップ . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
* 24.2.1 Djangoデバッグツールバーを使って重いクエリを探す . . . . . . . . . . . 305
* 24.2.2 クエリを減らす . . . . . . . . . . . . . . . . . . . . . . . 306
* 24.2.3 よく使われるクエリをスピードアップ . . . . . . . . . . . . . . . . . . . . . . . . 307
* 24.2.4 ATOMIC_REQUESTSはオフに . . . . . . . . . . . . . . . . . . 308
* 24.3 データベースを効果的に使う . . . . . . . . . . . . . . . . . . . . . . . . 308
* 24.3.1 データベースに入れないもの . . . . . . . . . . . . . . . . 308
* 24.3.2 PostgreSQLを効果的に使う . . . . . . . . . . . . . . . . . . . 309
* 24.3.3 MySQLを効果的に使う . . . . . . . . . . . . . . . . . . . . . 309
* 24.4 KVSを使ってクエリをキャッシュする . . . . . . . . . . . . . . . . . . . . . 310
* 24.5 キャッシュする箇所を特定する . . . . . . . . . . . . . . . . . . . . . . . . . . 310
* 24.6 外部キャッシュパッケージを検討する . . . . . . . . . . . . . . . . . . . . . . 310
* 24.7 静的ファイルをコンパクトに . . . . . . . . . . 311
* 24.8 アップストリームキャッシュやCDNを使う . . . . . . . . . . . . . . 312
* 24.9 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
* 24.10 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
* 25 非同期タスクキュー 315
* 25.1 タスクキューが必要? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316
* 25.2 タスクキューを選ぶ . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
* 25.3 タスクキューベストプラクティス . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
* 25.3.1 タスクはビューのように扱う . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
* 25.3.2 タスクはタダじゃない . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
* 25.3.3 JSONシリアライズした値だけタスクに渡 . . . . . . . . . . 319
* 25.3.4 タスクとワーカーの監視について . . . . . . . . . . . . . . . . 319
* 25.3.5 ロギング! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
* 25.3.6 バックログ監視 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
* 25.3.7 一定間隔でデッドタスクをクリアする . . . . . . . . . . . . . . . . . . . . . 320
* 25.3.8 結果が不要なら無効にする . . . . . . . . . . . . . . . . . . . . . . . 320
* 25.3.9 タスクキューのエラーハンドリング . . . . . . . . . . . . . . . . . . . . . . 320
* 25.3.10 全てのタスクはキーワード引数を受け付けるべき . . . . . . . . . . . . . . . . . . . . . . 321
* 25.3.11 採用したタスクキュー製品について学ぶ . . . . . . . . . . . . . 321
* 25.4 タスクキューについての参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
* 25.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
* 26 セキュリティベストプラクティス 323
* 26.1 サーバを強固にする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
* 26.2 Djangoのセキュリティ機能を知る . . . . . . . . . . . . . . . . . . . . . . . . . . 323
* 26.3 本番環境ではDEBUGモードをオフにする . . . . . . . . . . . . . . . . . . . . . . 324
* 26.4 秘密鍵を秘密にする . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
* 26.5 いつもどこでもHTTPS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
* 26.5.1 セキュアCookieを使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
* 26.5.2 HTTP Strict Transport Security (HSTS)を使う . . . . . . . . . . . . . . . 326
* 26.5.3 HTTPS設定ツール . . . . . . . . . . . . . . . . . . . . . . . . 328
* 26.6 ALLOWED_HOSTSバリデーションを有効にする . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328
* 26.7 データを更新するフォームにはCSRFプロテクションを有効にする . . . . . . . 328
* 26.8 クロスサイトスクリプティング(XSS)を防止する . . . . . . . . . . . . . . . . 328
* 26.8.1 Djangoテンプレートではmark_safeを使う . . . . . . . . . . . . . . . . . . . 329
* 26.8.2 ユーザにタグの属性を設定させない . . . . . . . . 329
* 26.8.3 JavaScriptで使われるデータはJSON化する . . . . . . . . . . 329
* 26.8.4 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
* 26.9 コードインジェクションからシステムを守る . . . . . . . . . . . . . . . . . . 329
* 26.9.1 コードを実行するビルトイン関数 . . . . . . . . . . . . . . . . . . . . 330
* 26.9.2 コードを実行できる標準ライブラリモジュール . . . . . . . . 330
* 26.9.3 コードを実行できる外部モジュール . . . . . . . . . . . . . . . 330
* 26.9.4 Cookieベースドセッションを使うときは気をつけて . . . . . . . . . . . . . . . . . . 331
* 26.10 全て入力データはフォームを使ってバリデーションする . . . . . . . . . . . . . . . . . . 332
* 26.11 支払い情報のフィールドでは自動入力を無効にする . . . . . . . . . . . . . . . . . . . 332
* 26.12 ユーザがアップロードしたファイルは気をつける . . . . . . . . . . . . . . . . . . . . . . . 333
* 26.12.1 もしCDNが使えないときは . . . . . . . . . . . . . . . . . . . . . . 333
* 26.12.2 Djangoとユーザがアップロードしたファイル . . . . . . . . . . . . . . . . . . . . . . 334
* 26.13 ModelForms.Meta.excludeは使わないで . . . . . . . . . . . . . . . . . . . . . . . . 334
* 26.13.1 マスアサイメント脆弱性 . . . . . . . . . . . . . . . . . . . . . . 337
* 26.14 ModelForms.Meta.fields = "__all__"を使わないで . . . . . . . . . . . . . . . 337
* 26.15 SQLインジェクションに気をつける . . . . . . . . . . . . . . . . . . . . . . . . . . 337
* 26.16 クレジットカード情報は保存しない . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
* 26.17 Django Adminをセキュアにする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
* 26.17.1 デフォルトのAdmin URLを変える . . . . . . . . . . . . . . . . . . . . . . 339
* 26.17.2 django-admin-honeypotを使う . . . . . . . . . . . . . . . . . . . . . . . . 339
* 26.17.3 AdminへのアクセスをHTTPSのみ許可する . . . . . . . . . . . . . . . . . . 339
* 26.17.4 AdminへのアクセスをIPアドレスで制限する . . . . . . . . . . . . . . . . . . . . . 340
* 26.17.5 allow_tagsを有効にするときは気をつけて . . . . . . . . . . . . . . . . 340
* 26.18 Admin Docsをセキュアにする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
* 26.19 サイトを監視する . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
* 26.20 依存モジュールを最新に保つ . . . . . . . . . . . . . . . . . . . . . . . 341
* 26.21 クリックジャックを防ぐ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
* 26.22 defusedxmlでXML爆弾を防ぐ . . . . . . . . . . . . . . . . . 341
* 26.23 2段階認証を知る . . . . . . . . . . . . . . . . . . . . . . . . 342
* 26.24 SecurityMiddlewareを採用する . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
* 26.25 強いパスワードを強制する . . . . . . . . . . . . . . . . . . . . . . . . . 343
* 26.26 システムを検査する . . . . . . . . . . . . . . . . . . . . . . . . . 343
* 26.27 脆弱性報告窓口を用意する . . . . . . . . . . . . . . . . . . . . . . . 344
* 26.28 django.utils.html.remove_tagの使用を止める. . . . . . . . . . . . . . . . . . . . . . 344
* 26.29 ミスをしてしまったとき向けに計画を準備する . . . . . . . . . . . . . . . . . . 344
* 26.29.1 システム全てを止めるか読み込み専用にする . . . . . . . . . . . 345
* 26.29.2 静的ページを用意する . . . . . . . . . . . . . . . . . . . . . . . . 345
* 26.29.3 全部バックアップをとる . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
* 26.29.4 security@djangoproject.comへメールを送ろう…もしあなたの失敗だったとしても . . . . . . . . 346
* 26.29.5 問題の調査を始める . . . . . . . . . . . . . . . . . . . . . . 346
* 26.30 全て最新に . . . . . . . . . . . . . . . . . . 347
* 26.31 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
* 27 ロギング: そもそも何のため 349
* 27.1 アプリケーションログと他のログ . . . . . . . . . . . . . . . . . . . . . . . . . . 349
* 27.2 なぜロギングか . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
* 27.3 ロギングレベルの使いかた . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
* 27.3.1 致命的な破壊の記録にはCRITICAL . . . . . . . . . . . . . . . . . . . . 351
* 27.3.2 製品エラーの記録にはERROR . . . . . . . . . . . . . . . . . . . 351
* 27.3.3 あまり重要ではない問題の記録にはWARNING . . . . . . . . . . . . . 352
* 27.3.4 役に立つ状態の記録にはINFO . . . . . . . . . . . . . . . . . 353
* 27.3.5 デバッグ関連メッセージの記録にはDEBUG . . . . . . . . . . . . . . . . . 353
* 27.4 例外を受けとったらトレースバックを記録する . . . . . . . . . . . . . . . . . . . . 355
* 27.5 一つのモジュール一つのロガー . . . . . . . . . . . . . . . . . . . . 356
* 27.6 ログをローテートする . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356
* 27.7 ロギングTips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357
* 27.8 これを読んでおこう . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357
* 27.9 役立つ外部ツール . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358
* 27.10 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358
* 28 シグナル: ユースケースと回避テクニック 359
* 28.1 シグナルの使いどころ . . . . . . . . . . . . . . . . . . . . . . . . . . 359
* 28.2 シグナル回避テクニック . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
* 28.2.1 シグナルの代わりにカスタムモデルマネージャを使おう . . . . . . . . 360
* 28.2.2 シグナルでモデルをバリデーションしない . . . . . . . . . . . . . . . . . . . . . . . 363
* 28.2.3 モデルのsave/deleteメソッドを使おう . . . . . . . . . . 363
* 28.2.4 ヘルパ関数を使おう . . ... ..  .. ..  .  ... . . . . . 364
* 28.3 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364
* 29 雑多なユーティリティについて? 365
* 29.1 Coreアプリをユーティリティのために作る . . . . . . . . . . . . . . . . . . . . . . . . 365
* 29.2 Djangoのスイスアーミーナイフ . . . . . . . . . . . . . . . . . . . . . . . . . . 366
* 29.2.1 django.contrib.humanize . . . . . . . . . . . . . . . . . . . . . . . . . . 367
* 29.2.2 django.utils.decorators.method_decorator(decorator) . . . . . . . . . . . . 367
* 29.2.3 django.utils.decorators.decorator_from_middleware(middleware) . . . . . 367
* 29.2.4 django.utils.encoding.force_text(value) . . . . . . . . . . . . . . . . . . . 368
* 29.2.5 django.utils.functional.cached_property . . . . . . . . . . . . . . . . . . . 368
* 29.2.6 django.utils.html.format_html(format_str, \*args, \*\*kwargs) . . . . . . . . . 369
* 29.2.7 django.utils.html.remove_tags(value, tags) . . . . . . . . . . . . . . . . . 369
* 29.2.8 django.utils.html.strip_tags(value) . . . . . . . . . . . . . . . . . . . . . . 369
* 29.2.9 django.utils.six . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369
* 29.2.10 django.utils.text.slugify(value) . . . . . . . . . . . . . . . . . . . . . . . . 370
* 29.2.11 django.utils.timezone . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371
* 29.2.12 django.utils.translation . . . . . . . . . . . . . . . . . . . . . . . . . . . 372
* 29.3 例外 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372
* 29.3.1 django.core.exceptions.ImproperlyConfigured . . . . . . . . . . . . . . . 372
* 29.3.2 django.core.exceptions.ObjectDoesNotExist . . . . . . . . . . . . . . . . 372
* 29.3.3 django.core.exceptions.PermissionDenied . . . . . . . . . . . . . . . . . 373
* 29.4 シリアライザとデシリアライザ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374
* 29.4.1 django.core.serializers.json.DjangoJSONEncoder . . . . . . . . . . . . . 377
* 29.4.2 django.core.serializers.pyyaml . . . . . . . . . . . . . . . . . . . . . . . . 377
* 29.4.3 django.core.serializers.xml_serializer . . . . . . . . . . . . . . . . . . . . 378
* 29.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378
* 30 Platforms as a Serviceにデプロイする 379
* 30.1 PaaSを評価する . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
* 30.1.1 コンプライアンス . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
* 30.1.2 価格 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381
* 30.1.3 アップタイム . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381
* 30.1.4 スタッフ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382
* 30.1.5 スケーリング . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382
* 30.1.6 ドキュメント . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383
* 30.1.7 パフォーマンス劣化 . . . . . . . . . . . . . . . . . . . . . . . . . . 383
* 30.1.8 地理的な性質 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
* 30.1.9 企業の安定度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
* 30.2 PaaSにデプロイするときのよい方法 . . . . . . . . . . . . . . . . . . . . . . . . 384
* 30.2.1 環境をできるだけ同じにする . . . . . . . . . . . . . . . . . . . . . . 384
* 30.2.2 全て自動化! . . . . . . . . . . . . . . . . . . . . . . . . . . 385
* 30.2.3 ステージング環境をメンテナンスする . . . . . . . . . . . . . . . . . . . . . . . . 385
* 30.2.4 何がおこってもいいようにバックアップとロールバックできるようにする . . . . . . . . . . . . . 385
* 30.2.5 別の場所にバックアップをとる . . . . . . . . . . . . . . . . . . . . . . . . . . . 386
* 30.3 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386
* 31 Djangoプロジェクトをデプロイする 387
* 31.1 小さなプロジェクト向けシングルサーバプラン . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
* 31.1.1 なにかやるべきか? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
* 31.1.2 例: Ubuntu + Gunicornクイックセットアップ . . . . . . . . . . . . . . . . 388
* 31.2 中規模から大規模プロジェクト向けマルチサーバプラン . . . . . . . . . . . . . . . . . . . . 389
* 31.2.1 発展的なマルチサーバセットアップ . . . . . . . . . . . . . . . . . . . . . . . 392
* 31.3 WSGIアプリケーションサーバたち . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 393
* 31.4 パフォーマンスとチューニング: uWSGIとGunicorn . . . . . . . . . . . . . . . . . . 394
* 31.5 安定性と使いやすさ: GunicornとApache . . . . . . . . . . . . . . . . . 395
* 31.6 Apacheのあるある . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
* 31.6.1 Apacheと環境変数 . . . . . . . . . . . . . . . . . . . . . 395
* 31.6.2 ApacheとVirtualenv . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
* 31.7 自動化された繰り返せるデプロイ . . . . . . . . . . . . . . . . . . . . . . . . 396
* 31.7.1 世界は変わる とーっても早く . . . . . . . . . . . . . . . . . . . . . . . . . 398
* 31.8 どの自動化ツールを使うべきか? . . . . . . . . . . . . . . . . . . . . . 399
* 31.8.1 企業間競争 . . . . . . . . . . . . . . . . . . . . . . . . . 399
* 31.8.2 自分で調べよう . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
* 31.9 現在使われているインフラ自動化ツール . . . . . . . . . . . . . . . . . . . . . . 400
* 31.10 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 402
* 31.11 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403
* 32 継続インテグレーション 405
* 32.1 継続インテグレーション主義 . . . . . . . . . . . . . . . . . . . . . . . . 406
* 32.1.1 たくさんのテスト! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406
* 32.1.2 ビルドは軽快に . . . . . . . . . . . . . . . . . . . . . . . . . . . 406
* 32.2 あなたのプロジェクトのための継続インテグレーションツール . . . . . . . . . . . . . . . . . . 407
* 32.2.1 Tox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
* 32.2.2 Jenkins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408
* 32.3 Continuous Integration as a Service . . . . . . . . . . . . . . . . . . . . . . . . . 408
* 32.3.1 Code Coverage as a Service . . . . . . . . . . . . . . . . . . . . . . . . . 409
* 32.4 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
* 32.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
* 33 アートオブデバッグ 411
* 33.1 開発環境でのデバッグ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
* 33.1.1 django-debug-toolbar . . . . . . . . . . . . . . . . . . . . . . . . . 411
* 33.1.2 やっかいなクラスベースドビューのエラー . . . . . . . . . . . . . . . . . . . . . . . . . 411
* 33.1.3 Pythonのデバッガを習得する . . . . . . . . . . . . . . . . . . . . . . . . 413
* 33.1.4 フォームからのアップロードで気を付けること . . . . . . . . . . . . . . 413
* 33.1.5 IDEやテキストエディタを使いこなす . . . . . . . . . . . . . . . . . . . . . . 416
* 33.2 本番環境でのデバッグ . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
* 33.2.1 ログを読むのが一番かんたん . . . . . . . . . . . . . . . . . . . . . . . . 416
* 33.2.2 本番環境をコピーする . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
* 33.2.3 UserBasedExceptionMiddleware . . . . . . . . . . . . . . . . . . . . . . 417
* 33.2.4 settings.ALLOWED_HOSTSの落とし穴 . . . . . . . . . . . 418
* 33.3 機能フラグ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
* 33.3.1 機能フラグのパッケージ . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
* 33.3.2 機能フラグはユニットテストに影響をおよぼす . . . . . . . . . . . . . . . 420
* 33.4 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
* 34 Djangoの情報をどうやって手に入れるか 421
* 34.1 どうやるべきか . . . . . . . . . . . . . . . . . . . . . . . . . . 421
* 34.2 どうやってグレートな質問をDjango IRCでするか . . . . . . . . . . . . . . . . . . . 421
* 34.3 あなたの頭脳に情報を . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
* 34.4 秘密のこと: コミュニティで存在感をアピール . . . . . . . . . . . . . . . . . . . . . 422
* 34.4.1 9つの簡単なコミュニティへの参加のしかた . . . . . . . . . . . . . . . . . . . . . . . . . 423
* 34.5 まとめ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
* 35 終わりかえて 425
* Appendix A: 書籍で紹介したパッケージ 427
* Appendix B: インストールトラブルシューティング 435
* 何が起きているか明かにする . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
* おすすめのソリューション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
* Virtualenvを確認する . . . . . . . . . . . . . . . . . . . . . . . . . . 436
* もしVirtualenvにDjango 1.8をインストールしていたら . . . . . . . . . . . . . . . . . 437
* 他のところも確認する . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
* Appendix C: 参考情報 439
* Python初心者向け . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
* Django初心者向け . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
* Django中級者以上向け . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
* Pythonについて . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
* JavaScriptについて . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
* Appendix D: 国際化と地域化 445
* はやく着手して! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
* 国際化のための関数を使う . . . . . . . . . . . . . . . . . . . . . 446
* メッセージを書き換えない . . . . . . . . . . . . . . . . . . . . . . . . . . . 447
* ブラウザにおけるページレイアウト . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450
* Appendix E: ある別のSettingsへのアプローチ 453
* Twelve FactorスタイルSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453
* Appendix F: Python 3で動かす 455
* コアパッケージはPython 3で動作します . . . . . . . . . . . . . . . . . . . . . . . . 455
* Python 3.3.3以降を使う . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 457
* Python 2とPython 3で動かす . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 457
* 参考情報 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458
* Appendix G: セキュリティ設定リファレンス 459
* セッションシリアライザ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 460
* Acknowledgments 461
* List of Figures 466
* List of Tables 469
* Index 471


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

